jobs:
  ghrelease:
    needs:
    - staging
    - promote
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
    - continue-on-error: true
      name: Install Tooling
      run: 'curl -sSL https://github.com/cbroglie/mustache/releases/download/v1.2.2/mustache_1.2.2_linux_amd64.tar.gz
        | sudo tar -C /usr/local/bin/ --no-same-owner -xzv mustache

        '
    - continue-on-error: true
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        PROJECT_VERSION: ${{needs.staging.outputs.project-version}}
        RELEASE_NOTES_DATA: ${{runner.temp}}/release_notes_data.json
        RELEASE_NOTES_FILE: ${{runner.temp}}/release_notes.md5
        RELEASE_NOTES_FOOTERS: ${{runner.temp}}/release_notes_footers.json
        RELEASE_NOTES_HEADERS: ${{runner.temp}}/release_notes_headers.json
        RELEASE_NOTES_ISSUES: ${{runner.temp}}/release_notes_issues.json
        RELEASE_NOTES_PRS: ${{runner.temp}}/release_notes_prs.json
      name: GitHub Release
      run: "gh issue list \\\n  --repo spring-projects/spring-shell \\\n  --search\
        \ milestone:$PROJECT_VERSION \\\n  --label automation/rlnotes-header  \\\n\
        \  --state all --json title,body \\\n  --jq '{headers:map(.),headerslength:(length)}'\
        \ \\\n  > $RELEASE_NOTES_HEADERS\ngh issue list \\\n  --repo spring-projects/spring-shell\
        \ \\\n  --search milestone:$PROJECT_VERSION \\\n  --label automation/rlnotes-footer\
        \  \\\n  --state all --json title,body \\\n  --jq '{footers:map(.),footerslength:(length)}'\
        \ \\\n  > $RELEASE_NOTES_FOOTERS\ngh issue list \\\n  --repo spring-projects/spring-shell\
        \ \\\n  --search milestone:$PROJECT_VERSION \\\n  --state all --json number,title,labels\
        \ \\\n  --jq '{issues:map(select((.labels | length == 0) or (any(.labels[].name;\
        \ startswith(\"automation/rlnotes\")|not))))}' \\\n  > $RELEASE_NOTES_ISSUES\n\
        gh pr list \\\n  --repo spring-projects/spring-shell \\\n  --search milestone:$PROJECT_VERSION\
        \ \\\n  --state all --json number,title,labels \\\n  --jq '{prs:map(.),prslength:(length)}'\
        \ \\\n  > $RELEASE_NOTES_PRS\njq -s '{issues:(.[0].issues),prs:(.[1].prs),prslength:(.[1].prslength),headers:(.[2].headers),headerslength:(.[2].headerslength),footers:(.[3].footers),\
        \ footerslength:(.[3].footerslength)}' \\\n  $RELEASE_NOTES_ISSUES \\\n  $RELEASE_NOTES_PRS\
        \ \\\n  $RELEASE_NOTES_HEADERS \\\n  $RELEASE_NOTES_FOOTERS \\\n  > $RELEASE_NOTES_DATA\n\
        mustache $RELEASE_NOTES_DATA .github/rlnotes.mustache > $RELEASE_NOTES_FILE\n\
        gh release create v$PROJECT_VERSION \\\n  --draft \\\n  --prerelease \\\n\
        \  --title \"$PROJECT_VERSION\" \\\n  --notes-file $RELEASE_NOTES_FILE\n"
  promote:
    environment: promote
    needs: staging
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
    - continue-on-error: true
      env:
        JF_ENV_SPRING: ${{ secrets.JF_ARTIFACTORY_SPRING }}
      uses: jfrog/setup-jfrog-cli@v3
      with:
        version: 2.21.5
    - continue-on-error: true
      name: Configure JFrog Cli
      run: 'echo JFROG_CLI_BUILD_NAME=spring-shell-main-milestone >> $GITHUB_ENV

        echo JFROG_CLI_BUILD_NUMBER=$GITHUB_RUN_NUMBER >> $GITHUB_ENV

        '
    - continue-on-error: true
      name: Promote Build
      run: 'jf rt build-promote libs-milestone-local

        '
  staging:
    outputs:
      project-version: ${{ steps.output.outputs.project-version }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
    - continue-on-error: true
      uses: actions/setup-java@v3
      with:
        distribution: adopt
        java-version: 17
    - continue-on-error: true
      uses: jvalkeal/setup-maven@v1
      with:
        maven-version: 3.8.4
    - continue-on-error: true
      env:
        JF_ENV_SPRING: ${{ secrets.JF_ARTIFACTORY_SPRING }}
      uses: jfrog/setup-jfrog-cli@v3
      with:
        version: 2.21.5
    - continue-on-error: true
      name: Configure JFrog Cli
      run: "jf rt gradlec \\\n  --use-wrapper \\\n  --uses-plugin \\\n  --deploy-ivy-desc=false\
        \ \\\n  --server-id-resolve repo.spring.io \\\n  --server-id-deploy repo.spring.io\
        \ \\\n  --repo-resolve milestone \\\n  --repo-deploy libs-staging-local\n\
        echo JFROG_CLI_BUILD_NAME=spring-shell-main-milestone >> $GITHUB_ENV\necho\
        \ JFROG_CLI_BUILD_NUMBER=$GITHUB_RUN_NUMBER >> $GITHUB_ENV\n"
    - continue-on-error: true
      name: Configure Milestone Version
      run: 'snapshotVersion=$( awk -F ''='' ''$1 == "version" { print $2 }'' gradle.properties
        )

        plainVersion=${snapshotVersion%-SNAPSHOT}

        milestoneVersion="$plainVersion-${{ github.event.inputs.milestone }}"

        sed -i "s/version=$snapshotVersion/version=$milestoneVersion/" gradle.properties

        echo PROJECT_VERSION=$milestoneVersion >> $GITHUB_ENV

        '
    - continue-on-error: true
      env:
        PROJECT_VERSION: ${{ env.PROJECT_VERSION }}
      name: Tag Release
      run: 'git config --global user.name github-actions[bot]

        git config --global user.email 41898282+github-actions[bot]@users.noreply.github.com

        git checkout -b $PROJECT_VERSION

        git commit -a -m "Release $PROJECT_VERSION"

        git tag "v$PROJECT_VERSION"

        '
    - continue-on-error: true
      env:
        DISABLE_SAMPLES: true
        GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_SECRET_ACCESS_KEY
          }}
        GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GRADLE_ENTERPRISE_CACHE_PASSWORD
          }}
        GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GRADLE_ENTERPRISE_CACHE_USER
          }}
        ORG_GRADLE_PROJECT_signingKey: ${{ secrets.GPG_PRIVATE_KEY }}
        ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.GPG_PASSPHRASE }}
      name: Build and Publish
      run: 'jf rt gradle build distZip artifactoryPublish

        jf rt build-publish

        '
    - continue-on-error: true
      env:
        PROJECT_VERSION: ${{ env.PROJECT_VERSION }}
      name: Push Release
      run: 'git push origin $PROJECT_VERSION

        git push --tags origin

        '
    - continue-on-error: true
      env:
        PROJECT_VERSION: ${{ env.PROJECT_VERSION }}
      id: output
      name: Output
      run: 'echo "project-version=$PROJECT_VERSION" >> $GITHUB_OUTPUT

        '
name: Release Milestone
on:
  repository_dispatch:
    types: trigger-ga___release-milestone.yml
